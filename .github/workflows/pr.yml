name: Tests

on:
  pull_request:
    branches:
      - 'master'

jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Define sha_short
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
      - name: Build & Push Base Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ github.repository }}:${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  vuln-scan:
    name: Vulnerability Scan
    needs: docker-build
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

  chart-test:
    name: Validate Helm chart
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Define sha_short
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Update chart image tag
        run: |
          sed -r -i 's/(appVersion:[^*])([[:alnum:].]*)/\1${{ steps.vars.outputs.sha_short }}/g' ./chart/Chart.yaml
      - name: Lint Helm chart
        run: helm lint ./chart

      #- name: Create Kind cluster
      #  uses: helm/kind-action@v1.2.0

      #- name: Install and Test chart
      #  run: |
      #    helm install test-release ./chart --wait
      #    helm test test-release